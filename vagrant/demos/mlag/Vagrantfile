# -*- mode: ruby -*-
# vi: set ft=ruby :

#-------------------------------------------------------------------------------
#
# Copyright 2015 Cumulus Networks, inc  all rights reserved
#
#-------------------------------------------------------------------------------

################################################################################
#
#   This Vagrant file configures a large layer two network, which is poor
#   network design, but many people do it. Graphically it looks like this:
#
#   +--------------------------+                  +--------------------------+
#   |                          |                  |                          |
#   |                     swp3 +--------/\--------+ swp3                     |
#   |           s1        swp4 +--------\/--------+ swp4      s2             |
#   |                          |                  |                          |
#   | swp5 swp6 swp7 swp8 swpX |                  | swp5 swp6 swp7 swp8 swpX |
#   +--+----+----+----+----+---+                  +--+----+----+----+----+---+
#      |    |    |    |    |                         |    |    |    |    |
#      |    |    |    |    +-->                      |    |    |    |    +-->
#      |    |    |    +-------> To other      +------+    |    |    +-------> 
#      |    |    +------------> pods          |           |    +------------> 
#      |    +---------------------------------)------+    +--------------+    
#      |                   +------------------+      |                   |    
#      |                   |                         |                   |    
#   +--+-------------------+---+                  +--+-------------------+---+
#   | swp1                swp2 |                  | swp1                swp2 |
#   |                     swp3 +--------/\--------+ swp3                     |
#   |          p1s1       swp4 +--------\/--------+ swp4     p1s2            |
#   |                          |                  |                          |
#   | swp5 swp6 swp7 swp8 swpY |                  | swp5 swp6 swp7 swp8 swpY |
#   +--+----+----+----+----+---+                  +--+----+----+----+----+---+
#      |    |    |    |    |                         |    |    |    |    |
#      |    |    |    |    +-->                      |    |    |    |    +-->
#      |    |    |    +-------> To other      +------+    |    |    +------->
#      |    |    +------------> racks         |           |    +------------>
#      |    +---------------------------------)------+    +--------------+   
#      |                   +------------------+      |                   |
#      |                   |                         |                   |
#   +--+-------------------+---+                  +--+-------------------+---+
#   | swp1                swp2 |                  | swp1                swp2 |
#   |                     swp3 +--------/\--------+ swp3                     |
#   |         p1r1s1      swp4 +--------\/--------+ swp4    p1r1s2           |
#   |                          |                  |                          |
#   | swp5 swp6 swp7 swp8 swpZ |                  | swp5 swp6 swp7 swp8 swpZ |
#   +--+----+----+----+----+---+                  +--+----+----+----+----+---+
#      |    |    |    |    |                         |    |    |    |    |
#      |    |+---)----)----)-------------------------+    |    |    |    |
#      |    ||   |    |    |+-----------------------------+    |    |    |
#      |    ||   |    |    ||              +-------------------+    |    |
#      |    ||   |    |    ||              |              +---------+    |
#      |    ||   |    |    +)--------------)--------------)--------+     |
#      |    ||   |    +-----)--------------)--------+     |        |     |
#      |    ||   +----------)--------+     |        |     |        |     |
#      |    +)--------+     |        |     |        |     |        |     |
#      |     |        |     |        |     |        |     |        |     |
#   +--+-----+--+  +--+-----+--+  +--+-----+--+  +--+-----+--+  +--+-----+--+
#   | swp1 swp2 |  | swp1 swp2 |  | swp1 swp2 |  | swp1 swp2 |  | swp1 swp2 |
#   |           |  |           |  |           |  |           |  |           |
#   |   p1r1h1  |  |   p1r1h2  |  |   p1r1h3  |  |   p1r1h4  |  |   p1r1hN  |
#   +-----------+  +-----------+  +-----------+  +-----------+  +-----------+
#
################################################################################

#-------------------------------------------------------------------------------
#
#   Constants and global variables
#
#-------------------------------------------------------------------------------

require 'tempfile'
require 'yaml'

properties = YAML.load_file('properties.yml')

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"


# Cumulus Linux box and memory size
CL_BOX_FILE     = "CumulusCommunity/cumulus-vx"
CL_MEMORY       = 512   # Enough for 3.0 version, increase if OOM messages appear in syslog

# Host box and memory size
HOST_BOX_FILE = "hashicorp/precise32"
#HOST_BOX_FILE   = "ubuntu/trusty32"
HOST_MEMORY     = 192

# Number of nodes to provision. Change these values in the properties.yml file
# to modify the size of the network configuration (see ASCII-art, above). Be 
# careful, changing these  values can dramatically affect the number of VMs 
# created.
podsPerDC       = properties[:podsPerDC]
racksPerPod     = properties[:racksPerPod]
hostsPerRack    = properties[:hostsPerRack]

# Stores temporary file handles so the temp files aren't immediately deleted.
$tmpFiles       = []

#
#   Header config snippet - This will be placed at the beginning of each
#   /etc/network/interfaces file on all VMs.
#
headerSnippet = <<SCRIPT
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
auto eth0
iface eth0 inet dhcp

SCRIPT

#
#   Config script for hosts - These commands will be run on each host (server)
#   VM at the end of provisioning
#
hostScript = <<SCRIPT
echo Provisioning host
apt-get install ifenslave
echo "bonding" >> /etc/modules
modprobe bonding
cp interfaces /etc/network/interfaces
rm interfaces
sleep 3
ifup eth1 eth2 bond0
SCRIPT

#
#   Config script for Cumulus Linux switches - These commands will be run on
#   each Cumulus Linux switch VM at the end of provisioning.
#
swScript = <<SCRIPT
echo Provisioning switch
cp interfaces /etc/network/interfaces
rm interfaces
ifreload -a
SCRIPT


#-------------------------------------------------------------------------------
#
#   Functions
#
#-------------------------------------------------------------------------------

#
#   This function runs 'vboxmanage modifyvm' on the VirtualBox specified by 'vb'.
#   The vbParams is a dictionary where the keys are the attribute to modify and
#   the values are the value to which the attribute will be set.
#
def modifyVBox(vb, vbParams)
    vbParams.each do |key, value| 
        vb.customize ["modifyvm", :id, "--" + key, value]
    end
end

#
#   This function provisions the virtual machine, specified by "node". The 
#   fileStr parameter is a string of the contents of a file to be copied over
#   to the VM (placed in the default user directory, and called 'interfaces').
#   The script is a string of commands to be executed once the file has been
#   copied.
#
def provisionVm(node, fileStr, script)
    node.vm.provision "file" do |f|
        file = Tempfile.new('vagrant')
        $tmpFiles += [file] # Done so the tmp files are not deleted right away
        file.write(fileStr)
        f.source = file.path
        f.destination = "interfaces"
        file.close
    end

    node.vm.provision "shell" do |s|
        s.inline = script
    end
end

#
#   Return a string of /etc/network/interfaces configuration for a bond.
#
def addBond(name, slaves, clagId)
    bondSnippet = <<SCRIPT
auto %s
iface %s
    bond-slaves %s
    bond-mode 802.3ad
    bond-miimon 100
    bond-min-links 1
    bond-xmit_hash_policy layer3+4
    bond-lacp-rate 1
    clag-id %d

SCRIPT
    return bondSnippet % [name, name, slaves.join(" "), clagId]
end

#
#   Return a string of /etc/network/interfaces configuration for a clag peer
#   link (bond and VLAN sub-interface).
#
def addPeer(name, slaves, vid, pairIdx, pairNum)
    peerSnippet = <<SCRIPT
auto %s
iface %s
    bond-slaves %s
    bond-mode 802.3ad
    bond-miimon 100
    bond-min-links 1
    bond-xmit_hash_policy layer3+4
    bond-lacp-rate 1

auto %s.%d
iface %s.%d
    address 169.254.0.%d/30
    clagd-sys-mac 44:38:39:ff:ff:%02x
    clagd-peer-ip 169.254.0.%d
    clagd-args -vm  # Only needed for VMs. Don't set on real switches.
    # A backup-ip is highly recommended, and is normally set to the management
    # (eth0) ip address of the peer switch. But because vagrant pretty much
    # requires eth0 to be a nat interface, we can't configure a backup-ip here.
    # clagd-backup-ip <ipaddr> 

SCRIPT
    return peerSnippet % [name, name, slaves.join(" "), name, vid, name, vid, pairIdx, pairNum, 3 - pairIdx]
end

#
#   Return a string of /etc/network/interfaces configuration for a bridge
#
def addBridge(name, members)
    bridgeSnippet = <<SCRIPT
auto %s
iface %s
    bridge-ports %s
    bridge-vlan-aware yes
    bridge-stp on

SCRIPT

    return bridgeSnippet % [name, name, members.join(" ")]
end

#
#   Return a string of /etc/network/interfaces configuration for a host's
#   interfaces
#
def addHost(ip, mask)
    hostSnippet = <<SCRIPT
auto eth1
iface eth1 inet manual
    bond-master bond0

auto eth2
iface eth2 inet manual
    bond-master bond0

auto bond0
iface bond0 inet static
    address %s
    netmask %s
    bond-slaves none
    bond-mode 802.3ad
    bond-miimon 100
    bond-min-links 1
    bond-xmit_hash_policy layer3+4
    bond-lacp-rate 1

SCRIPT

    return hostSnippet % [ip, mask]
end


#-------------------------------------------------------------------------------
#
#   Main Vagrant configuration script
#
#-------------------------------------------------------------------------------
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

    # Defaults for switches, so they don't have to be set every time.
    config.vm.box = CL_BOX_FILE
    config.vm.box_check_update = false
    config.vm.synced_folder '.', '/vagrant', disabled: true
    config.vm.guest = "debian"

    # Configure the Pods
    1.upto(podsPerDC) do |podNum|

        # Configure the Racks
        1.upto(racksPerPod) do |rackNum|

            # Configure the 2 TORs in this rack
            (1..2).each do |torSwNum|
                partName = ("p" + podNum.to_s + "r" + rackNum.to_s + "s").to_sym
                nodeName = (partName.to_s + torSwNum.to_s).to_sym
                config.vm.define nodeName.to_s do |node|
                    node.vm.hostname = nodeName.to_s
                    # Mgmt: eth0 NIC config and /etc/network/interface snippet
                    vbParams = { "ioapic" => "on",  "chipset"  => "ich9",
                                 "nic1"   => "nat", "nictype1" => "virtio" }
                    etcNetInt = headerSnippet

                    # Uplink: swp1-2 NIC config and /etc/network/interface uplink bond config
                    (2..3).each do |uplink|
                        vbParams["nic"     + uplink.to_s] = "intnet"
                        vbParams["nictype" + uplink.to_s] = "virtio"
                        vbParams["intnet"  + uplink.to_s] = 
                            "p" + podNum.to_s + "s" + (uplink-1).to_s + "-" + nodeName.to_s
                        vbParams["nicpromisc" + uplink.to_s] = "allow-vms"
                    end
                    etcNetInt += addBond("uplink", ["swp1", "swp2"], 1)
                    brPorts = ["uplink"]

                    # Peerlink: swp3-4 NIC config and /etc/network/interface peer config
                    (4..5).each do |peerlink|
                        vbParams["nic"     + peerlink.to_s] = "intnet"
                        vbParams["nictype" + peerlink.to_s] = "virtio"
                        vbParams["intnet"  + peerlink.to_s] = 
                            partName.to_s + "1-" + partName.to_s + "2-" + (peerlink-3).to_s
                        vbParams["nicpromisc" + peerlink.to_s] = "allow-vms"
                    end
                    pairNum = (podNum-1)*(racksPerPod+1) + rackNum
                    etcNetInt += addPeer("peerlink", ["swp3", "swp4"], 4094, torSwNum, pairNum)
                    brPorts += ["peerlink"]

                    # Downlink: swp5-N NIC config and /etc/network/interface host bond config
                    6.upto(hostsPerRack+5) do |hostlink|
                        vbParams["nic"     + hostlink.to_s] = "intnet"
                        vbParams["nictype" + hostlink.to_s] = "virtio"
                        vbParams["intnet"  + hostlink.to_s] = 
                            nodeName.to_s + "-" + "p" + podNum.to_s + "r" + rackNum.to_s + "h" + (hostlink-5).to_s
                        vbParams["nicpromisc" + hostlink.to_s] = "allow-vms"
                        etcNetInt += addBond("host" + (hostlink-5).to_s, ["swp" + (hostlink-1).to_s], hostlink-4)
                        brPorts += ["host" + (hostlink-5).to_s]
                    end
                    etcNetInt += addBridge("br0", brPorts)

                    # Do the actual VirtualBox VM modifications
                    node.vm.provider "virtualbox" do |vb|
                        vb.name = nodeName.to_s
                        vb.memory = CL_MEMORY
                        modifyVBox(vb, vbParams)
                    end

                    # Provision the VM (create /etc/network/interfaces, run a few commands)
                    provisionVm(node, etcNetInt, swScript)

                end
            end

            # Configure the hosts in this rack
            1.upto(hostsPerRack) do |hostNum|
                nodeName = ("p" + podNum.to_s + "r" + rackNum.to_s + "h" + hostNum.to_s).to_sym
                config.vm.define nodeName.to_s do |node|
                    # Override the defaults set above
                    host = (podNum-1)*(racksPerPod*(hostsPerRack+2)+2) + (rackNum-1)*(hostsPerRack+2) + hostNum
                    node.vm.box = HOST_BOX_FILE
                    node.vm.synced_folder '.', '/vagrant', disabled: false
                    node.ssh.username = "vagrant"
                    node.ssh.password = "vagrant"
                    node.vm.hostname = nodeName.to_s
                    # Mgmt: eth0 NIC config and /etc/network/interface snippet
                    vbParams = { "ioapic" => "on",  "chipset"  => "ich9",
                                 "nic1"   => "nat", "nictype1" => "virtio" }
                    etcNetInt = headerSnippet

                    # Torlink: swp1-2 NIC config and /etc/network/interface torlink bond config
                    (2..3).each do |torLink|
                        vbParams["nic"     + torLink.to_s] = "intnet"
                        vbParams["nictype" + torLink.to_s] = "82540EM"
                        vbParams["intnet"  + torLink.to_s] = 
                            "p" + podNum.to_s + "r" + rackNum.to_s + "s" + (torLink-1).to_s + "-" + nodeName.to_s
                        vbParams["nicpromisc" + torLink.to_s] = "allow-vms"
                        # NIC MACs are set to same value to work around a MAC change bug in virtual box
                        vbParams["macaddress" + torLink.to_s] = "00534500%02X%02X" % [host / 256, host % 256]
                    end
                    etcNetInt += addHost("10.99.%s.%s" % [host / 256, host % 256], "255.255.0.0")

                    # Do the actual VirtualBox VM modifications
                    node.vm.provider "virtualbox" do |vb|
                        vb.name = nodeName.to_s
                        vb.memory = HOST_MEMORY
                        modifyVBox(vb, vbParams)
                    end

                    # Provision the VM (create /etc/network/interfaces, run a few commands)
                    provisionVm(node, etcNetInt, hostScript)

                end
            end
        end

        # Configure the Pod switches in this pod
        (1..2).each do |podSwNum|
            partName = ("p" + podNum.to_s + "s").to_sym
            nodeName = (partName.to_s + podSwNum.to_s).to_sym
            config.vm.define nodeName.to_s do |node|
                node.vm.hostname = nodeName.to_s
                # Mgmt: eth0 NIC config and /etc/network/interface snippet
                vbParams = { "ioapic" => "on",  "chipset"  => "ich9",
                             "nic1"   => "nat", "nictype1" => "virtio" }
                etcNetInt = headerSnippet

                # Uplink: swp1-2 NIC config and /etc/network/interface uplink bond config
                (2..3).each do |uplink|
                    vbParams["nic"     + uplink.to_s] = "intnet"
                    vbParams["nictype" + uplink.to_s] = "virtio"
                    vbParams["intnet"  + uplink.to_s] = 
                        "s" + (uplink-1).to_s + "-" + nodeName.to_s
                    vbParams["nicpromisc" + uplink.to_s] = "allow-vms"
                end
                etcNetInt += addBond("uplink", ["swp1", "swp2"], 1)
                brPorts = ["uplink"]

                # Peerlink: swp3-4 NIC config and /etc/network/interface peer config
                (4..5).each do |peerlink|
                    vbParams["nic"     + peerlink.to_s] = "intnet"
                    vbParams["nictype" + peerlink.to_s] = "virtio"
                    vbParams["intnet"  + peerlink.to_s] = 
                        partName.to_s + "1-" + partName.to_s + "2-" + (peerlink-3).to_s
                    vbParams["nicpromisc" + peerlink.to_s] = "allow-vms"
                end
                pairNum = (podNum-1)*(racksPerPod+1) + 3
                etcNetInt += addPeer("peerlink", ["swp3", "swp4"], 4094, podSwNum, pairNum)
                brPorts += ["peerlink"]

                # Downlink: swp5-N NIC config and /etc/network/interface host bond config
                1.upto(racksPerPod) do |racNum|
                    (1..2).each do |torSwNum|
                        nicNum = 2*(racNum-1) + 5 + torSwNum
                        vbParams["nic"     + nicNum.to_s] = "intnet"
                        vbParams["nictype" + nicNum.to_s] = "virtio"
                        vbParams["intnet"  + nicNum.to_s] = 
                            nodeName.to_s + "-" + "p" + podNum.to_s + "r" + racNum.to_s + "s" + torSwNum.to_s
                        vbParams["nicpromisc" + nicNum.to_s] = "allow-vms"
                    end
                    etcNetInt += addBond("downlink" + racNum.to_s, ["swp" + (2*(racNum-1) + 5).to_s, "swp" + (2*(racNum-1) + 6).to_s,], racNum+1)
                    brPorts += ["downlink" + racNum.to_s]
                end
                etcNetInt += addBridge("br0", brPorts)

                # Do the actual VirtualBox VM modifications
                node.vm.provider "virtualbox" do |vb|
                    vb.name = nodeName.to_s
                    vb.memory = CL_MEMORY
                    modifyVBox(vb, vbParams)
                end

                # Provision the VM (create /etc/network/interfaces, run a few commands)
                provisionVm(node, etcNetInt, swScript)

            end
        end
    end

    # Configure the 2 data center switches
    (1..2).each do |dcSwNum|
        partName = ("s").to_sym
        nodeName = (partName.to_s + dcSwNum.to_s).to_sym
        config.vm.define nodeName.to_s do |node|
            node.vm.hostname = nodeName.to_s
            # Mgmt: eth0 NIC config and /etc/network/interface snippet
            vbParams = { "ioapic" => "on",  "chipset"  => "ich9",
                         "nic1"   => "nat", "nictype1" => "virtio" }
            etcNetInt = headerSnippet

            # Uplink: swp1-2 NIC config and /etc/network/interface uplink bond config
            (2..3).each do |uplink|
                vbParams["nic"     + uplink.to_s] = "intnet"
                vbParams["nictype" + uplink.to_s] = "virtio"
                vbParams["intnet"  + uplink.to_s] = 
                    "unused" + (uplink-1).to_s + "-" + nodeName.to_s
                vbParams["nicpromisc" + uplink.to_s] = "allow-vms"
            end

            # Peerlink: swp3-4 NIC config and /etc/network/interface peer config
            (4..5).each do |peerlink|
                vbParams["nic"     + peerlink.to_s] = "intnet"
                vbParams["nictype" + peerlink.to_s] = "virtio"
                vbParams["intnet"  + peerlink.to_s] = 
                    partName.to_s + "1-" + partName.to_s + "2-" + (peerlink-3).to_s
                vbParams["nicpromisc" + peerlink.to_s] = "allow-vms"
            end
            pairNum = (podsPerDC)*(racksPerPod+1) + 1
            etcNetInt += addPeer("peerlink", ["swp3", "swp4"], 4094, dcSwNum, pairNum)
            brPorts = ["peerlink"]

            # Downlink: swp5-N NIC config and /etc/network/interface host bond config
            1.upto(podsPerDC) do |podNum|
                (1..2).each do |podSwNum|
                    nicNum = 2*(podNum-1) + 5 + podSwNum
                    vbParams["nic"     + nicNum.to_s] = "intnet"
                    vbParams["nictype" + nicNum.to_s] = "virtio"
                    vbParams["intnet"  + nicNum.to_s] = 
                        nodeName.to_s + "-" + "p" + podNum.to_s + "s" + podSwNum.to_s
                    vbParams["nicpromisc" + nicNum.to_s] = "allow-vms"
                end
                etcNetInt += addBond("downlink" + podNum.to_s, ["swp" + (2*(podNum-1) + 5).to_s, "swp" + (2*(podNum-1) + 6).to_s], podNum+1)
                brPorts += ["downlink" + podNum.to_s]
            end
            etcNetInt += addBridge("br0", brPorts)

            # Do the actual VirtualBox VM modifications
            node.vm.provider "virtualbox" do |vb|
                vb.name = nodeName.to_s
                vb.memory = CL_MEMORY
                modifyVBox(vb, vbParams)
            end

            # Provision the VM (create /etc/network/interfaces, run a few commands)
            provisionVm(node, etcNetInt, swScript)

        end
    end
end

